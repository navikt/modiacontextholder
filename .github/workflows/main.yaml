name: Build, push, and deploy

on: [push]

concurrency:
  group: main-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true
  TZ: Europe/Oslo

jobs:
  build:
    name: Test and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'
      - name: Build using maven
        run: |
          mvn -P ci -B verify

  build-and-push:
    name: Build and push Docker container
    needs: build
    if: github.ref == 'refs/heads/master'
    permissions:
      packages: write
      contents: read
      id-token: write
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'
      - name: Publish Docker image
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: personoversikt
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

  trivy-scan:
    name: Trivy scan
    needs: build-and-push
    permissions:
      contents: write # to write sarif
      security-events: write # push sarif to github security
      id-token: write # for nais/login
      actions: read # for private repositories
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nais/login@v0
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: personoversikt
      - run: docker pull ${{ needs.build-and-push.outputs.image }}
      - name: Run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ needs.build-and-push.outputs.image }}'
          format: 'sarif'
          output: 'trivy.sarif'
          severity: 'HIGH,CRITICAL'
          limit-severities-for-sarif: true

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy.sarif'


  deploy-qa:
    name: Deploy to preprod
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    environment: dev-fss
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        namespace: [q0, q1]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          PRINT_PAYLOAD: true
          CLUSTER: dev-fss
          RESOURCE: .nais/qa-template.yaml
          VAR: namespace=${{matrix.namespace}},image=${{ needs.build-and-push.outputs.image }}

  deploy-prod:
    name: Deploy to prod
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    environment: prod-fss
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          PRINT_PAYLOAD : true
          CLUSTER: prod-fss
          RESOURCE: .nais/nais.yaml
          VAR: image=${{ needs.build-and-push.outputs.image }}

  deploy-gcp-dev:
    name: Deploy to dev gcp
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    environment: dev-gcp
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        namespace: [ q2 ]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          PRINT_PAYLOAD: true
          CLUSTER: dev-gcp
          RESOURCE: .nais/dev.yaml
          VAR: namespace=${{matrix.namespace}},image=${{ needs.build-and-push.outputs.image }}

  deploy-gcp-prod:
    name: Deploy to prod gcp
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    environment: prod-gcp
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          PRINT_PAYLOAD: true
          CLUSTER: prod-gcp
          RESOURCE: .nais/prod.yaml
          VAR: image=${{ needs.build-and-push.outputs.image }}
